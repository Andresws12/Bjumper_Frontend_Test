import { faker } from '@faker-js/faker';

import { UserData, RepositoriesData } from '@/models/user/UserData';

/**
 * The function `createRandomUserData` generates random user data using the Faker library in
 * TypeScript.
 * @returns The function `createRandomUserData` returns an object of type `UserData`.
 */
export function createRandomUserData(): UserData {
  return {
    login: faker.internet.userName(),
    id: faker.number.int(),
    node_id: faker.string.uuid(),
    avatar_url: faker.image.avatar(),
    gravatar_id: faker.string.uuid(),
    url: faker.internet.url(),
    html_url: faker.internet.url(),
    followers_url: faker.internet.url(),
    following_url: faker.internet.url(),
    gists_url: faker.internet.url(),
    starred_url: faker.internet.url(),
    subscriptions_url: faker.internet.url(),
    organizations_url: faker.internet.url(),
    repos_url: faker.internet.url(),
    events_url: faker.internet.url(),
    received_events_url: faker.internet.url(),
    type: faker.word.adjective(),
    site_admin: faker.datatype.boolean(),
    name: faker.person.fullName(),
    company: faker.company.name(),
    blog: faker.internet.url(),
    location: faker.location.city(),
    email: faker.internet.email(),
    hireable: faker.datatype.boolean(),
    bio: faker.lorem.paragraph(),
    twitter_username: faker.internet.userName(),
    public_repos: faker.number.int(),
    public_gists: faker.number.int(),
    followers: faker.number.int(),
    following: faker.number.int(),
    created_at: faker.date.past(),
    updated_at: faker.date.recent(),
  };
}

export function createRandomRepositoriesData(): RepositoriesData {
  return {
    id: faker.number.int(),
    node_id: faker.string.uuid(),
    name: faker.lorem.word(),
    full_name: faker.lorem.words(),
    private: faker.datatype.boolean(),
    owner: {
      login: faker.internet.userName(),
      id: faker.number.int(),
      node_id: faker.string.uuid(),
      avatar_url: faker.image.avatar(),
      gravatar_id: faker.string.uuid(),
      url: faker.internet.url(),
      html_url: faker.internet.url(),
      followers_url: faker.internet.url(),
      following_url: faker.internet.url(),
      gists_url: faker.internet.url(),
      starred_url: faker.internet.url(),
      subscriptions_url: faker.internet.url(),
      organizations_url: faker.internet.url(),
      repos_url: faker.internet.url(),
      events_url: faker.internet.url(),
      received_events_url: faker.internet.url(),
      type: faker.word.adjective(),
      site_admin: faker.datatype.boolean(),
    },
    html_url: faker.internet.url(),
    description: null,
    fork: faker.datatype.boolean(),
    url: faker.internet.url(),
    forks_url: faker.internet.url(),
    keys_url: faker.internet.url(),
    collaborators_url: faker.internet.url(),
    teams_url: faker.internet.url(),
    hooks_url: faker.internet.url(),
    issue_events_url: faker.internet.url(),
    events_url: faker.internet.url(),
    assignees_url: faker.internet.url(),
    branches_url: faker.internet.url(),
    tags_url: faker.internet.url(),
    blobs_url: faker.internet.url(),
    git_tags_url: faker.internet.url(),
    git_refs_url: faker.internet.url(),
    trees_url: faker.internet.url(),
    statuses_url: faker.internet.url(),
    languages_url: faker.internet.url(),
    stargazers_url: faker.internet.url(),
    contributors_url: faker.internet.url(),
    subscribers_url: faker.internet.url(),
    subscription_url: faker.internet.url(),
    commits_url: faker.internet.url(),
    git_commits_url: faker.internet.url(),
    comments_url: faker.internet.url(),
    issue_comment_url: faker.internet.url(),
    contents_url: faker.internet.url(),
    compare_url: faker.internet.url(),
    merges_url: faker.internet.url(),
    archive_url: faker.internet.url(),
    downloads_url: faker.internet.url(),
    issues_url: faker.internet.url(),
    pulls_url: faker.internet.url(),
    milestones_url: faker.internet.url(),
    notifications_url: faker.internet.url(),
    labels_url: faker.internet.url(),
    releases_url: faker.internet.url(),
    deployments_url: faker.internet.url(),
    created_at: faker.date.past(),
    updated_at: faker.date.recent(),
    pushed_at: faker.date.recent(),
    git_url: faker.internet.url(),
    ssh_url: faker.internet.url(),
    clone_url: faker.internet.url(),
    svn_url: faker.internet.url(),
    homepage: null,
    size: faker.number.int(),
    stargazers_count: faker.number.int(),
    watchers_count: faker.number.int(),
    language: null,
    has_issues: faker.datatype.boolean(),
    has_projects: faker.datatype.boolean(),
    has_downloads: faker.datatype.boolean(),
    has_wiki: faker.datatype.boolean(),
    has_pages: faker.datatype.boolean(),
    has_discussions: faker.datatype.boolean(),
    forks_count: faker.number.int(),
    mirror_url: null,
    archived: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    open_issues_count: faker.number.int(),
    license: null,
    allow_forking: faker.datatype.boolean(),
    is_template: faker.datatype.boolean(),
    web_commit_signoff_required: faker.datatype.boolean(),
    topics: [],
    visibility: faker.lorem.word(),
    forks: faker.number.int(),
    open_issues: faker.number.int(),
    watchers: faker.number.int(),
    default_branch: faker.lorem.word(),
  };
}
